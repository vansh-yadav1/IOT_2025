import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import {
  Container,
  Typography,
  Box,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TableSortLabel,
  TablePagination,
  Chip,
  Button,
  TextField,
  InputAdornment,
  IconButton,
  Tooltip,
  Alert,
  AlertTitle,
  Menu,
  MenuItem,
  ListItemIcon,
  ListItemText,
  Skeleton,
  Breadcrumbs,
  Link,
  useTheme,
  useMediaQuery,
  Card,
  CardContent,
  Grid,
  Divider,
  Stack,
  Badge,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  SelectChangeEvent,
  Snackbar
} from '@mui/material';
import {
  Search as SearchIcon,
  FilterList as FilterListIcon,
  GetApp as DownloadIcon,
  Share as ShareIcon,
  NavigateNext as NavigateNextIcon,
  Visibility as ViewIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  MoreVert as MoreIcon,
  Print as PrintIcon,
  Add as AddIcon,
  Refresh as RefreshIcon,
  FileDownload as FileDownloadIcon,
  ContentCopy as CopyIcon,
  SortByAlpha as SortIcon,
  Warning as WarningIcon,
  ErrorOutline as ErrorIcon,
  CheckCircleOutline as CheckCircleIcon,
  FilePresent as FileIcon,
  NotificationsActive as AlertIcon,
  NoteAdd as NewReportIcon
} from '@mui/icons-material';

// Error boundary component
class ErrorBoundary extends React.Component<
  { children: React.ReactNode; onRetry: () => void },
  { hasError: boolean; error: Error | null }
> {
  constructor(props: { children: React.ReactNode; onRetry: () => void }) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // Log the error to an error reporting service
    console.error("Error in ReportsList component:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <Box sx={{ p: 3 }}>
          <Alert 
            severity="error"
            action={
              <Button
                color="inherit"
                size="small"
                onClick={() => {
                  this.setState({ hasError: false, error: null });
                  this.props.onRetry();
                }}
              >
                Retry
              </Button>
            }
          >
            <AlertTitle>Error Loading Reports</AlertTitle>
            {this.state.error?.message || "An unexpected error occurred"}
          </Alert>
        </Box>
      );
    }

    return this.props.children;
  }
}

// Types for reports data
interface Report {
  id: string;
  title: string;
  type: string;
  department: string;
  generatedBy: string;
  date: string;
  status: 'completed' | 'pending' | 'error';
  size: string;
  viewed: boolean;
}

// Filter type
interface Filters {
  status: string;
  department: string;
  type: string;
  timeRange: string;
}

// Sort type
type Order = 'asc' | 'desc';
interface HeadCell {
  id: keyof Report;
  label: string;
  numeric: boolean;
  sortable: boolean;
  minWidth?: number;
}

// Define table headers
const headCells: HeadCell[] = [
  { id: 'title', label: 'Report Name', numeric: false, sortable: true },
  { id: 'type', label: 'Type', numeric: false, sortable: true },
  { id: 'department', label: 'Department', numeric: false, sortable: true, minWidth: 120 },
  { id: 'generatedBy', label: 'Generated By', numeric: false, sortable: true, minWidth: 150 },
  { id: 'date', label: 'Date', numeric: false, sortable: true, minWidth: 100 },
  { id: 'status', label: 'Status', numeric: false, sortable: true },
  { id: 'size', label: 'Size', numeric: true, sortable: true },
];

// Available report types
const reportTypes = [
  'Lab Results', 
  'Imaging', 
  'Patient Summary', 
  'Billing', 
  'Insurance Claims',
  'Medication History',
  'Visit Summary'
];

// Available departments
const departments = [
  'Cardiology',
  'Radiology',
  'Pathology',
  'Neurology',
  'Oncology',
  'Pediatrics',
  'Emergency',
  'Billing & Administration'
];

// Time range options
const timeRanges = [
  { value: 'today', label: 'Today' },
  { value: 'week', label: 'This Week' },
  { value: 'month', label: 'This Month' },
  { value: 'quarter', label: 'This Quarter' },
  { value: 'year', label: 'This Year' },
  { value: 'all', label: 'All Time' }
];

const ReportsList: React.FC = () => {
  const theme = useTheme();
  const navigate = useNavigate();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [orderBy, setOrderBy] = useState<keyof Report>('date');
  const [order, setOrder] = useState<Order>('desc');
  const [actionsAnchorEl, setActionsAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedReportId, setSelectedReportId] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState<Filters>({
    status: 'all',
    department: 'all',
    type: 'all',
    timeRange: 'all'
  });
  const [notificationOpen, setNotificationOpen] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');
  const [filterDialogOpen, setFilterDialogOpen] = useState(false);

  // Handle printing a report
  const handlePrint = (reportId: string) => {
    console.log(`Printing report ${reportId}`);
    window.open(`/reports/${reportId}/print`, '_blank');
    handleCloseActionsMenu();
  };

  // Load reports data
  const loadReports = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      // Simulating API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock reports data
      const mockReports: Report[] = Array.from({ length: 30 }, (_, index) => {
        const date = new Date();
        date.setDate(date.getDate() - Math.floor(Math.random() * 60));
        
        const reportType = reportTypes[Math.floor(Math.random() * reportTypes.length)];
        const department = departments[Math.floor(Math.random() * departments.length)];
        const status: Report['status'] = ['completed', 'pending', 'error'][Math.floor(Math.random() * 3)] as Report['status'];
        const size = `${Math.floor(Math.random() * 10) + 1}.${Math.floor(Math.random() * 9)}MB`;
        
        return {
          id: `report-${index + 1}`,
          title: `${reportType} Report #${1000 + index}`,
          type: reportType,
          department: department,
          generatedBy: ['Dr. John Smith', 'Dr. Sarah Johnson', 'Dr. Michael Lee', 'Lab System', 'Radiology Dept'][Math.floor(Math.random() * 5)],
          date: date.toISOString().split('T')[0],
          status,
          size,
          viewed: Math.random() > 0.5
        };
      });
      
      setReports(mockReports);
    } catch (err) {
      setError(err instanceof Error ? err : new Error('Failed to load reports'));
    } finally {
      setLoading(false);
    }
  }, []);

  // Load reports on mount
  useEffect(() => {
    loadReports();
  }, [loadReports]);

  // Filter reports
  const filteredReports = useMemo(() => {
    return reports.filter(report => {
      // Apply search filter
      if (searchQuery && !report.title.toLowerCase().includes(searchQuery.toLowerCase()) && 
          !report.type.toLowerCase().includes(searchQuery.toLowerCase()) &&
          !report.department.toLowerCase().includes(searchQuery.toLowerCase()) &&
          !report.generatedBy.toLowerCase().includes(searchQuery.toLowerCase())) {
        return false;
      }
      
      // Apply status filter
      if (filters.status !== 'all' && report.status !== filters.status) {
        return false;
      }
      
      // Apply department filter
      if (filters.department !== 'all' && report.department !== filters.department) {
        return false;
      }
      
      // Apply type filter
      if (filters.type !== 'all' && report.type !== filters.type) {
        return false;
      }
      
      // Apply time range filter
      if (filters.timeRange !== 'all') {
        const reportDate = new Date(report.date);
        const today = new Date();
        
        switch (filters.timeRange) {
          case 'today':
            if (reportDate.toDateString() !== today.toDateString()) return false;
            break;
          case 'week':
            const startOfWeek = new Date(today);
            startOfWeek.setDate(today.getDate() - today.getDay());
            if (reportDate < startOfWeek) return false;
            break;
          case 'month':
            if (reportDate.getMonth() !== today.getMonth() || reportDate.getFullYear() !== today.getFullYear()) return false;
            break;
          case 'quarter':
            const currentQuarter = Math.floor(today.getMonth() / 3);
            const reportQuarter = Math.floor(reportDate.getMonth() / 3);
            if (reportQuarter !== currentQuarter || reportDate.getFullYear() !== today.getFullYear()) return false;
            break;
          case 'year':
            if (reportDate.getFullYear() !== today.getFullYear()) return false;
            break;
        }
      }
      
      return true;
    });
  }, [reports, searchQuery, filters]);

  // Sort reports
  const sortedReports = useMemo(() => {
    if (!filteredReports.length) return [];
    
    return [...filteredReports].sort((a, b) => {
      // For string values
      if (typeof a[orderBy] === 'string' && typeof b[orderBy] === 'string') {
        const comparison = (a[orderBy] as string).localeCompare(b[orderBy] as string);
        return order === 'asc' ? comparison : -comparison;
      }
      
      // For date strings
      if (orderBy === 'date') {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return order === 'asc' ? dateA.getTime() - dateB.getTime() : dateB.getTime() - dateA.getTime();
      }
      
      // Default case
      return order === 'asc' 
        ? a[orderBy] < b[orderBy] ? -1 : 1 
        : a[orderBy] > b[orderBy] ? -1 : 1;
    });
  }, [filteredReports, order, orderBy]);

  // Pagination logic
  const paginatedReports = useMemo(() => {
    return sortedReports.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);
  }, [sortedReports, page, rowsPerPage]);

  // Handle sort request
  const handleRequestSort = (property: keyof Report) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  // Handle pagination
  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Handle search
  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(event.target.value);
    setPage(0);
  };

  // Handle filter changes
  const handleFilterChange = (event: SelectChangeEvent<string>) => {
    setFilters({
      ...filters,
      [event.target.name]: event.target.value
    });
    setPage(0);
  };

  // Reset filters
  const handleResetFilters = () => {
    setFilters({
      status: 'all',
      department: 'all',
      type: 'all',
      timeRange: 'all'
    });
    setSearchQuery('');
    setPage(0);
  };

  // Handle report view
  const handleViewReport = useCallback((reportId: string) => {
    // Mark report as viewed
    setReports(prevReports => 
      prevReports.map(report => 
        report.id === reportId ? { ...report, viewed: true } : report
      )
    );
    
    // Navigate to report details page
    navigate(`/reports/${reportId}`);
  }, [navigate]);

  // Handle report download
  const handleDownloadReport = useCallback((reportId: string) => {
    const report = reports.find(r => r.id === reportId);
    if (!report) return;
    
    setNotificationMessage(`Downloaded "${report.title}"`);
    setNotificationOpen(true);
    setActionsAnchorEl(null);
    // In a real app, this would trigger an actual download
  }, [reports]);

  // Handle report share
  const handleShareReport = useCallback((reportId: string) => {
    const report = reports.find(r => r.id === reportId);
    if (!report) return;
    
    navigator.clipboard.writeText(`https://hospital-app.com/reports/${reportId}`);
    setNotificationMessage(`Link for "${report.title}" copied to clipboard`);
    setNotificationOpen(true);
    setActionsAnchorEl(null);
  }, [reports]);

  // Handle report delete
  const handleDeleteReport = useCallback((reportId: string) => {
    const report = reports.find(r => r.id === reportId);
    if (!report) return;
    
    setReports(prevReports => prevReports.filter(r => r.id !== reportId));
    setNotificationMessage(`"${report.title}" has been deleted`);
    setNotificationOpen(true);
    setActionsAnchorEl(null);
  }, [reports]);

  // Open actions menu
  const handleOpenActionsMenu = (event: React.MouseEvent<HTMLElement>, reportId: string) => {
    setActionsAnchorEl(event.currentTarget);
    setSelectedReportId(reportId);
  };

  // Close actions menu
  const handleCloseActionsMenu = () => {
    setActionsAnchorEl(null);
    setSelectedReportId(null);
  };

  // Render a status chip for a report
  const renderStatusChip = (status: Report['status']) => {
    const statusInfo = {
      completed: { color: 'success', icon: <CheckCircleIcon fontSize="small" />, label: 'Completed' },
      pending: { color: 'warning', icon: <WarningIcon fontSize="small" />, label: 'Pending' },
      error: { color: 'error', icon: <ErrorIcon fontSize="small" />, label: 'Error' }
    };
    
    const { color, icon, label } = statusInfo[status];
    
    return (
      <Chip
        size="small"
        icon={icon}
        label={label}
        color={color as 'success' | 'warning' | 'error'}
        variant="outlined"
      />
    );
  };

  // Format date for better accessibility
  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return dateString;
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    }).format(date);
  };

  // Handle create new report
  const handleCreateNewReport = () => {
    navigate('/reports/new');
  };

  // Rendering table skeletons during loading
  const renderSkeletons = () => (
    <TableBody>
      {Array.from({ length: rowsPerPage }).map((_, index) => (
        <TableRow key={`skeleton-${index}`}>
          {Array.from({ length: headCells.length + 1 }).map((_, cellIndex) => (
            <TableCell key={`skeleton-cell-${index}-${cellIndex}`}>
              <Skeleton variant="text" width={cellIndex === 0 ? '60%' : '80%'} />
            </TableCell>
          ))}
        </TableRow>
      ))}
    </TableBody>
  );

  // Render empty state
  const renderEmptyState = () => (
    <TableBody>
      <TableRow>
        <TableCell colSpan={headCells.length + 1} align="center" sx={{ py: 8 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', p: 3 }}>
            <FileIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              No reports found
            </Typography>
            <Typography variant="body2" color="text.secondary" paragraph>
              {searchQuery || Object.values(filters).some(v => v !== 'all')
                ? 'Try adjusting your search or filter criteria'
                : 'There are no reports available at this time'}
            </Typography>
            {(searchQuery || Object.values(filters).some(v => v !== 'all')) && (
              <Button 
                startIcon={<RefreshIcon />} 
                variant="outlined" 
                onClick={handleResetFilters}
                sx={{ mt: 1 }}
              >
                Reset filters
              </Button>
            )}
          </Box>
        </TableCell>
      </TableRow>
    </TableBody>
  );

  // Render report count summary
  const renderReportCount = () => (
    <Typography variant="body2" color="text.secondary">
      {filteredReports.length === 0 
        ? 'No reports found' 
        : `Showing ${page * rowsPerPage + 1}-${Math.min((page + 1) * rowsPerPage, filteredReports.length)} of ${filteredReports.length} reports`}
    </Typography>
  );

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Breadcrumbs 
          separator={<NavigateNextIcon fontSize="small" />} 
          aria-label="breadcrumb"
          sx={{ mb: 3 }}
        >
          <Link 
            component={RouterLink} 
            color="inherit" 
            to="/dashboard" 
            underline="hover"
          >
            Dashboard
          </Link>
          <Typography color="text.primary">Reports</Typography>
        </Breadcrumbs>
        
        <Alert 
          severity="error" 
          sx={{ mb: 4 }}
          action={
            <Button 
              color="inherit" 
              size="small"
              onClick={loadReports}
            >
              Retry
            </Button>
          }
        >
          <AlertTitle>Error Loading Reports</AlertTitle>
          {error.message}
        </Alert>
      </Container>
    );
  }

  return (
    <ErrorBoundary onRetry={loadReports}>
      <Container maxWidth="lg" sx={{ py: 4 }}>
        {/* Breadcrumbs navigation */}
        <Breadcrumbs 
          separator={<NavigateNextIcon fontSize="small" />} 
          aria-label="breadcrumb"
          sx={{ mb: 3 }}
        >
          <Link 
            component={RouterLink} 
            color="inherit" 
            to="/dashboard" 
            underline="hover"
          >
            Dashboard
          </Link>
          <Typography color="text.primary">Reports</Typography>
        </Breadcrumbs>
        
        {/* Page header */}
        <Grid container spacing={2} alignItems="center" sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6}>
            <Typography variant="h4" component="h1">
              Reports
            </Typography>
            <Typography variant="body2" color="text.secondary">
              View, download, and manage your medical reports
            </Typography>
          </Grid>
          <Grid item xs={12} sm={6} sx={{ textAlign: { xs: 'left', sm: 'right' } }}>
            <Button
              variant="contained"
              startIcon={<NewReportIcon />}
              onClick={handleCreateNewReport}
            >
              New Report
            </Button>
          </Grid>
        </Grid>
        
        {/* Filters and search */}
        <Paper 
          elevation={0} 
          sx={{ 
            p: 2, 
            mb: 3, 
            border: `1px solid ${theme.palette.divider}`,
            borderRadius: 2
          }}
        >
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                placeholder="Search reports..."
                value={searchQuery}
                onChange={handleSearchChange}
                variant="outlined"
                size="small"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon color="action" />
                    </InputAdornment>
                  )
                }}
              />
            </Grid>
            
            <Grid item xs={6} md={2}>
              <FormControl variant="outlined" size="small" fullWidth>
                <InputLabel id="status-filter-label">Status</InputLabel>
                <Select
                  labelId="status-filter-label"
                  id="status-filter"
                  name="status"
                  value={filters.status}
                  onChange={handleFilterChange}
                  label="Status"
                >
                  <MenuItem value="all">All Statuses</MenuItem>
                  <MenuItem value="completed">Completed</MenuItem>
                  <MenuItem value="pending">Pending</MenuItem>
                  <MenuItem value="error">Error</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={6} md={2}>
              <Button
                fullWidth
                variant="outlined"
                startIcon={<FilterListIcon />}
                onClick={() => setFilterDialogOpen(true)}
              >
                More Filters
              </Button>
            </Grid>
            
            {Object.values(filters).some(v => v !== 'all') && (
              <Grid item xs={12} md={2} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                <Button
                  variant="text"
                  size="small"
                  onClick={handleResetFilters}
                >
                  Reset Filters
                </Button>
              </Grid>
            )}
          </Grid>
          
          {/* Active filters summary */}
          {Object.values(filters).some(v => v !== 'all') && (
            <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
              {filters.department !== 'all' && (
                <Chip 
                  label={`Department: ${filters.department}`} 
                  size="small" 
                  onDelete={() => setFilters({...filters, department: 'all'})}
                />
              )}
              {filters.type !== 'all' && (
                <Chip 
                  label={`Type: ${filters.type}`} 
                  size="small" 
                  onDelete={() => setFilters({...filters, type: 'all'})}
                />
              )}
              {filters.timeRange !== 'all' && (
                <Chip 
                  label={`Time: ${timeRanges.find(t => t.value === filters.timeRange)?.label}`} 
                  size="small" 
                  onDelete={() => setFilters({...filters, timeRange: 'all'})}
                />
              )}
            </Box>
          )}
        </Paper>
        
        {/* Reports table */}
        <Paper
          elevation={0} 
          sx={{ 
            mb: 4, 
            border: `1px solid ${theme.palette.divider}`,
            borderRadius: 2,
            overflow: 'hidden'
          }}
        >
          <TableContainer sx={{ maxHeight: 640 }}>
            <Table stickyHeader aria-label="reports table">
              <TableHead>
                <TableRow>
                  {headCells.map((headCell) => (
                    <TableCell
                      key={headCell.id}
                      sortDirection={orderBy === headCell.id ? order : false}
                      sx={{ 
                        minWidth: headCell.minWidth,
                        backgroundColor: theme.palette.background.paper,
                        fontWeight: 600
                      }}
                    >
                      {headCell.sortable ? (
                        <TableSortLabel
                          active={orderBy === headCell.id}
                          direction={orderBy === headCell.id ? order : 'asc'}
                          onClick={() => handleRequestSort(headCell.id)}
                        >
                          {headCell.label}
                        </TableSortLabel>
                      ) : (
                        headCell.label
                      )}
                    </TableCell>
                  ))}
                  <TableCell sx={{ backgroundColor: theme.palette.background.paper, fontWeight: 600 }}>
                    Actions
                  </TableCell>
                </TableRow>
              </TableHead>
              
              {loading ? (
                renderSkeletons()
              ) : paginatedReports.length === 0 ? (
                renderEmptyState()
              ) : (
                <TableBody>
                  {paginatedReports.map((report) => (
                    <TableRow
                      hover
                      key={report.id}
                      sx={{ 
                        cursor: 'pointer',
                        backgroundColor: !report.viewed ? alpha(theme.palette.primary.light, 0.05) : 'inherit'
                      }}
                      onClick={() => handleViewReport(report.id)}
                      tabIndex={0}
                      aria-label={`View report: ${report.title}`}
                    >
                      <TableCell>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          {!report.viewed && (
                            <Badge 
                              color="primary" 
                              variant="dot" 
                              sx={{ mr: 1 }}
                              aria-label="New report"
                            />
                          )}
                          <Typography 
                            variant="body2"
                            fontWeight={!report.viewed ? 500 : 400}
                          >
                            {report.title}
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <Chip label={report.type} size="small" />
                      </TableCell>
                      <TableCell>{report.department}</TableCell>
                      <TableCell>{report.generatedBy}</TableCell>
                      <TableCell>{formatDate(report.date)}</TableCell>
                      <TableCell>{renderStatusChip(report.status)}</TableCell>
                      <TableCell>{report.size}</TableCell>
                      <TableCell>
                        <Stack direction="row" spacing={1}>
                          <Tooltip title="View Report">
                            <IconButton
                              size="small"
                              aria-label={`View report: ${report.title}`}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleViewReport(report.id);
                              }}
                            >
                              <ViewIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Download Report">
                            <IconButton
                              size="small"
                              aria-label={`Download report: ${report.title}`}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleDownloadReport(report.id);
                              }}
                            >
                              <DownloadIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="More Actions">
                            <IconButton
                              size="small"
                              aria-label="More actions"
                              aria-controls="report-actions-menu"
                              aria-haspopup="true"
                              onClick={(e) => {
                                e.stopPropagation();
                                handleOpenActionsMenu(e, report.id);
                              }}
                            >
                              <MoreIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </Stack>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              )}
            </Table>
          </TableContainer>
          
          {/* Table pagination */}
          <Box
            sx={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              px: 2,
              py: 1.5,
              borderTop: `1px solid ${theme.palette.divider}`
            }}
          >
            {renderReportCount()}
            
            <TablePagination
              component="div"
              count={filteredReports.length}
              page={page}
              onPageChange={handleChangePage}
              rowsPerPage={rowsPerPage}
              onRowsPerPageChange={handleChangeRowsPerPage}
              rowsPerPageOptions={[5, 10, 25, 50]}
              labelDisplayedRows={({ from, to, count }) => `${from}-${to} of ${count}`}
              labelRowsPerPage={isMobile ? "Rows:" : "Rows per page:"}
            />
          </Box>
        </Paper>
      </Container>
      
      {/* Advanced filter dialog */}
      <Dialog 
        open={filterDialogOpen} 
        onClose={() => setFilterDialogOpen(false)}
        maxWidth="xs"
        fullWidth
      >
        <DialogTitle>Filter Reports</DialogTitle>
        <DialogContent dividers>
          <Stack spacing={3}>
            <FormControl fullWidth>
              <InputLabel id="department-filter-label">Department</InputLabel>
              <Select
                labelId="department-filter-label"
                id="department-filter"
                name="department"
                value={filters.department}
                onChange={handleFilterChange}
                label="Department"
              >
                <MenuItem value="all">All Departments</MenuItem>
                {departments.map((dept) => (
                  <MenuItem key={dept} value={dept}>{dept}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <FormControl fullWidth>
              <InputLabel id="type-filter-label">Report Type</InputLabel>
              <Select
                labelId="type-filter-label"
                id="type-filter"
                name="type"
                value={filters.type}
                onChange={handleFilterChange}
                label="Report Type"
              >
                <MenuItem value="all">All Types</MenuItem>
                {reportTypes.map((type) => (
                  <MenuItem key={type} value={type}>{type}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <FormControl fullWidth>
              <InputLabel id="time-filter-label">Time Range</InputLabel>
              <Select
                labelId="time-filter-label"
                id="time-filter"
                name="timeRange"
                value={filters.timeRange}
                onChange={handleFilterChange}
                label="Time Range"
              >
                {timeRanges.map((range) => (
                  <MenuItem key={range.value} value={range.value}>{range.label}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleResetFilters}>Reset</Button>
          <Button onClick={() => setFilterDialogOpen(false)} variant="contained">
            Apply Filters
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Actions menu */}
      <Menu
        anchorEl={actionsAnchorEl}
        open={Boolean(actionsAnchorEl)}
        onClose={handleCloseActionsMenu}
      >
        <MenuItem 
          onClick={() => {
            if (selectedReportId) handleViewReport(selectedReportId);
          }}
        >
          <ListItemIcon>
            <ViewIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>View</ListItemText>
        </MenuItem>
        <MenuItem 
          onClick={() => {
            if (selectedReportId) handleDownloadReport(selectedReportId);
          }}
        >
          <ListItemIcon>
            <FileDownloadIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Download</ListItemText>
        </MenuItem>
        <MenuItem 
          onClick={() => {
            if (selectedReportId) handleShareReport(selectedReportId);
          }}
        >
          <ListItemIcon>
            <ShareIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Share</ListItemText>
        </MenuItem>
        <MenuItem 
          onClick={() => {
            if (selectedReportId) handlePrint(selectedReportId);
          }}
        >
          <ListItemIcon>
            <PrintIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Print</ListItemText>
        </MenuItem>
        <Divider />
        <MenuItem 
          onClick={() => {
            if (selectedReportId) handleDeleteReport(selectedReportId);
          }}
          sx={{ color: 'error.main' }}
        >
          <ListItemIcon sx={{ color: 'error.main' }}>
            <DeleteIcon fontSize="small" />
          </ListItemIcon>
          <ListItemText>Delete</ListItemText>
        </MenuItem>
      </Menu>
      
      {/* Notifications */}
      <Snackbar
        open={notificationOpen}
        autoHideDuration={4000}
        onClose={() => setNotificationOpen(false)}
        message={notificationMessage}
      />
    </ErrorBoundary>
  );
};

export default ReportsList;

// Helper function to create alpha color
const alpha = (color: string, opacity: number): string => {
  const _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);
  return color + _opacity.toString(16).toUpperCase().padStart(2, '0');
}; 